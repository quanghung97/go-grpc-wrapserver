// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.22.0
// source: service2.proto

package pingpong2

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PingPong2_Ping2_FullMethodName = "/service2.PingPong2/Ping2"
)

// PingPong2Client is the client API for PingPong2 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PingPong2Client interface {
	Ping2(ctx context.Context, in *Ping2Request, opts ...grpc.CallOption) (*Pong2Response, error)
}

type pingPong2Client struct {
	cc grpc.ClientConnInterface
}

func NewPingPong2Client(cc grpc.ClientConnInterface) PingPong2Client {
	return &pingPong2Client{cc}
}

func (c *pingPong2Client) Ping2(ctx context.Context, in *Ping2Request, opts ...grpc.CallOption) (*Pong2Response, error) {
	out := new(Pong2Response)
	err := c.cc.Invoke(ctx, PingPong2_Ping2_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PingPong2Server is the server API for PingPong2 service.
// All implementations must embed UnimplementedPingPong2Server
// for forward compatibility
type PingPong2Server interface {
	Ping2(context.Context, *Ping2Request) (*Pong2Response, error)
	mustEmbedUnimplementedPingPong2Server()
}

// UnimplementedPingPong2Server must be embedded to have forward compatible implementations.
type UnimplementedPingPong2Server struct {
}

func (UnimplementedPingPong2Server) Ping2(context.Context, *Ping2Request) (*Pong2Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping2 not implemented")
}
func (UnimplementedPingPong2Server) mustEmbedUnimplementedPingPong2Server() {}

// UnsafePingPong2Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PingPong2Server will
// result in compilation errors.
type UnsafePingPong2Server interface {
	mustEmbedUnimplementedPingPong2Server()
}

func RegisterPingPong2Server(s grpc.ServiceRegistrar, srv PingPong2Server) {
	s.RegisterService(&PingPong2_ServiceDesc, srv)
}

func _PingPong2_Ping2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ping2Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PingPong2Server).Ping2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PingPong2_Ping2_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PingPong2Server).Ping2(ctx, req.(*Ping2Request))
	}
	return interceptor(ctx, in, info, handler)
}

// PingPong2_ServiceDesc is the grpc.ServiceDesc for PingPong2 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PingPong2_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service2.PingPong2",
	HandlerType: (*PingPong2Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping2",
			Handler:    _PingPong2_Ping2_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service2.proto",
}
